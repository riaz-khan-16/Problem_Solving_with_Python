


#https://leetcode.com/problems/merge-intervals/

# Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, 
# and return an array of the non-overlapping intervals that cover all the intervals in the input.


# Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
# Output: [[1,6],[8,10],[15,18]]





# Algorithm
#           1.  Sort the array based on first element
#           2.  Take an empty array x
#           3.  Find where overlap exist and make an non overlapping array and add to the x
#           4.  Find where overlap don't exist and add to the x
#           5.  Do the  same thing again and again
#           6.  return the array x




def merge_intervals(intervals):
    # Sort the intervals by their start times
    intervals.sort(key=lambda x: x[0])
     # Take an empty array x
    merged_intervals = []

    # initialize 
    current_interval = intervals[0]
    
    # Iterate through the sorted intervals and merge any overlapping intervals
    for interval in intervals[1:]:
        if interval[0] <= current_interval[1]:
            current_interval[1] = max(current_interval[1], interval[1])
        else:
            merged_intervals.append(current_interval)
            current_interval = interval
    
    merged_intervals.append(current_interval)
    return merged_intervals







    











          
           


